$rem-base: 16px !default;

@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

@function lower-bound($range){
	@if length($range) <= 0 {
		@return 0;
	}
	@return nth($range,1);
}

@function upper-bound($range) {
	@if length($range) < 2 {
		@return 999999999999;
	}
	@return nth($range, 2);
}

@function convert-to-rem($value, $base-value: $rem-base)  {
	$value: strip-unit($value) / strip-unit($base-value) * 1rem;
	@if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
	@return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
	$max: length($values);

	@if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

	$remValues: ();
	@for $i from 1 through $max {
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
	}
	@return $remValues;
}

$screen: "only screen";

$xsmall-range: (0, 30em);
$small-range: (30.063em, 40em);
$medium-range: (40.063em, 52em);
$large-range: (52.063em, 64em);
$xlarge-range: (64.063em, 90em);
$xxlarge-range: (90.063em, 99999999em);

$landscape: "#{$screen} and (orientation: landscape)";
$portrait: "#{$screen} and (orientation: portrait)";

$xsmall-up: $screen;
$xsmall-down: "#{$screen} and (max-width:#{lower-bound($xsmall-range)})";
$xsmall-only: "#{$screen} and (min-width: #{upper-bound($xsmall-range)})";

$small-up: "#{$screen} and (min-width:#{lower-bound($small-range)})";
$small-down: "#{$screen} and (max-width:#{upper-bound($small-range)})";
$small-only: "#{$screen} and (min-width:#{lower-bound($small-range)}) and (max-width:#{upper-bound($small-range)})";

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})";
$medium-down: "#{$screen} and (max-width:#{upper-bound($medium-range)})";
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})";

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})";
$large-down: "#{$screen} and (max-width:#{upper-bound($large-range)})";
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})";

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})";
$xlarge-down: "#{$screen} and (max-width:#{upper-bound($xlarge-range)})";
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})";

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})";
$xxlarge-down: $screen;
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})";

$hdpi: "(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 1.5dppx)";

.no-text-left, .no-text-right {
	overflow: hidden;
}

.no-text-left {
	text-indent: -9999px;
}

.no-text-right {
	text-indent: 9999px;
}

.sprite-after:after {
	content: " ";
}

@mixin text_ellipsis {
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow: hidden;
}

@mixin sprite_background {
	background-image: nth(map-get($sprites, _url), 1);
	@media #{$hdpi} {
		background-image: nth(map-get($sprites, _url), 2);
	}
}

.sprite, .sprite-after:after {
	background-repeat: no-repeat;
	background-size: map-get($sprites, _size);
	display: block;
	@include sprite_background;
}

@function sprite_position($image) {
	@return map-get(map-get($sprites, $image), offset);
}

@mixin sprite($image, $setSize: true) {
	background-position: map-get(map-get($sprites, $image), offset);
	@if ($setSize) {
		width: map-get(map-get($sprites, $image), w);
		height: map-get(map-get($sprites, $image), h);
	}
	@extend .sprite;
}

@mixin sprite_nosize($image) {
	background-position: map-get(map-get($sprites, $image), offset);
}
